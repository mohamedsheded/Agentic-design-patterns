# ToolAgent

## Overview

The `ToolAgent` class is a powerful agent designed to interact with a language model and utilize various tools to assist with user queries. This agent can generate function calls based on user input, validate function arguments, and execute respective tools.

## Features

- **Dynamic Tool Execution**: Supports executing multiple tools dynamically based on user input.
- **Argument Validation**: Ensures correct function parameters are passed before execution.
- **Chat History Management**: Maintains structured chat history for meaningful interactions.
- **Tool Response Handling**: Processes and returns results from executed tools.

## Class Attributes

| Attribute    | Type   | Description                                                                                                        |                                          |
| ------------ | ------ | ------------------------------------------------------------------------------------------------------------------ | ---------------------------------------- |
| `tools`      | \`Tool | list[Tool]\`                                                                                                       | A list of available tools for execution. |
| `model`      | `str`  | The language model used for generating tool calls and responses. Default: `llama3-groq-70b-8192-tool-use-preview`. | Should support tool calling              |
| `client`     | `Groq` | The Groq client used to interact with the language model.                                                          |                                          |
| `tools_dict` | `dict` | A dictionary mapping tool names to their corresponding `Tool` objects.                                             |                                          |

## Methods

### `__init__(self, tools: Tool | list[Tool], model: str = "llama3-groq-70b-8192-tool-use-preview") -> None`

#### Description

Initializes the `ToolAgent` instance by setting up the language model, tools, and tool dictionary.

#### Parameters

- `tools`: A single `Tool` object or a list of `Tool` objects.
- `model`: The name of the language model to use.

---

### `add_tool_signatures(self) -> str`

#### Description

Retrieves and concatenates all tool function signatures in JSON format.

#### Returns

- `str`: A string representation of tool function signatures.

---

### `process_tool_calls(self, tool_calls_content: list) -> dict`

#### Description

Processes tool calls by validating arguments, executing the corresponding tools, and collecting results.

#### Parameters

- `tool_calls_content`: A list of tool call requests in JSON format.

#### Returns

- `dict`: A dictionary mapping tool call IDs to execution results.

#### Steps

1. Iterates through tool calls.
2. Extracts the tool name and retrieves the corresponding `Tool` object.
3. Validates function arguments using `validate_arguments`.
4. Executes the tool and captures the result.
5. Stores the result in an `observations` dictionary.

---

### `run(self, user_msg: str) -> str`

#### Description

Manages the interaction process by handling user input, executing the necessary tools, and generating responses.

#### Parameters

- `user_msg`: The message input from the user.

#### Returns

- `str`: The final response generated by the model.

#### Steps

1. Constructs a user query prompt using `build_prompt_structure`.
2. Appends system and user messages to `tool_chat_history`.
3. Appends user messages to `agent_chat_history`.
4. Generates a tool call response using `completions_create`.
5. Extracts tool calls from the response using `extract_tag_content`.
6. If tool calls are found, processes the tool calls and updates chat history.
7. Generates a final response based on the observations and returns it.

##

